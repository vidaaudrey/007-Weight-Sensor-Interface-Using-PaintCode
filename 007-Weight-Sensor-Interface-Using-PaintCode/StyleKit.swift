//
//  StyleKit.swift
//  Weight Sensor
//
//  Created by Audrey Li on 3/23/15.
//  Copyright (c) 2015 Shomigo.com. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var ringFillColor: UIColor = UIColor(red: 0.761, green: 0.729, blue: 0.729, alpha: 1.000)
        static var green: UIColor = UIColor(red: 0.343, green: 0.800, blue: 0.320, alpha: 1.000)
        static var lightGreen: UIColor = UIColor(red: 0.697, green: 0.800, blue: 0.320, alpha: 1.000)
        static var gradientColor3: UIColor = UIColor(red: 0.904, green: 0.153, blue: 0.153, alpha: 1.000)
        static var gradient: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [StyleKit.lightGreen.CGColor, StyleKit.lightGreen.blendedColorWithFraction(0.5, ofColor: StyleKit.green).CGColor, StyleKit.green.CGColor, StyleKit.green.blendedColorWithFraction(0.5, ofColor: StyleKit.gradientColor3).CGColor, StyleKit.gradientColor3.CGColor], [0.04, 0.3, 0.47, 0.77, 1])
    }

    //// Colors

    public class var ringFillColor: UIColor { return Cache.ringFillColor }
    public class var green: UIColor { return Cache.green }
    public class var lightGreen: UIColor { return Cache.lightGreen }
    public class var gradientColor3: UIColor { return Cache.gradientColor3 }

    //// Gradients

    public class var gradient: CGGradient { return Cache.gradient }

    //// Drawing Methods

    public class func drawWeightSensor(#frame: CGRect, weightScale: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let pointerFillColor = UIColor(red: 0.524, green: 0.513, blue: 0.501, alpha: 1.000)

        //// Variable Declarations
     
        let pointerAngle: CGFloat = -270 * weightScale


        //// Subframes
        let weightSensorViewGroup: CGRect = CGRectMake(frame.minX + floor((frame.width - 327) * 0.50000) + 0.5, frame.minY + floor((frame.height - 279.5) * 1.04327 - 0) + 0.5, 327, 279.5)


        //// weightSensorViewGroup
        //// outerRing Drawing
        var outerRingPath = UIBezierPath()
        outerRingPath.moveToPoint(CGPointMake(weightSensorViewGroup.minX + 327, weightSensorViewGroup.minY + 163.14))
        outerRingPath.addCurveToPoint(CGPointMake(weightSensorViewGroup.minX + 279.15, weightSensorViewGroup.minY + 278.4), controlPoint1: CGPointMake(weightSensorViewGroup.minX + 327, weightSensorViewGroup.minY + 208.14), controlPoint2: CGPointMake(weightSensorViewGroup.minX + 308.72, weightSensorViewGroup.minY + 248.89))
        outerRingPath.addCurveToPoint(CGPointMake(weightSensorViewGroup.minX + 264.58, weightSensorViewGroup.minY + 264.08), controlPoint1: CGPointMake(weightSensorViewGroup.minX + 271.5, weightSensorViewGroup.minY + 270.89), controlPoint2: CGPointMake(weightSensorViewGroup.minX + 265.71, weightSensorViewGroup.minY + 265.19))
        outerRingPath.addCurveToPoint(CGPointMake(weightSensorViewGroup.minX + 306.54, weightSensorViewGroup.minY + 163.14), controlPoint1: CGPointMake(weightSensorViewGroup.minX + 290.5, weightSensorViewGroup.minY + 238.25), controlPoint2: CGPointMake(weightSensorViewGroup.minX + 306.54, weightSensorViewGroup.minY + 202.56))
        outerRingPath.addCurveToPoint(CGPointMake(weightSensorViewGroup.minX + 163.3, weightSensorViewGroup.minY + 20.39), controlPoint1: CGPointMake(weightSensorViewGroup.minX + 306.54, weightSensorViewGroup.minY + 84.3), controlPoint2: CGPointMake(weightSensorViewGroup.minX + 242.41, weightSensorViewGroup.minY + 20.39))
        outerRingPath.addCurveToPoint(CGPointMake(weightSensorViewGroup.minX + 83.9, weightSensorViewGroup.minY + 44.31), controlPoint1: CGPointMake(weightSensorViewGroup.minX + 133.93, weightSensorViewGroup.minY + 20.39), controlPoint2: CGPointMake(weightSensorViewGroup.minX + 106.63, weightSensorViewGroup.minY + 29.2))
        outerRingPath.addCurveToPoint(CGPointMake(weightSensorViewGroup.minX + 20.05, weightSensorViewGroup.minY + 163.14), controlPoint1: CGPointMake(weightSensorViewGroup.minX + 45.41, weightSensorViewGroup.minY + 69.9), controlPoint2: CGPointMake(weightSensorViewGroup.minX + 20.05, weightSensorViewGroup.minY + 113.57))
        outerRingPath.addCurveToPoint(CGPointMake(weightSensorViewGroup.minX + 62.01, weightSensorViewGroup.minY + 264.08), controlPoint1: CGPointMake(weightSensorViewGroup.minX + 20.05, weightSensorViewGroup.minY + 202.56), controlPoint2: CGPointMake(weightSensorViewGroup.minX + 36.09, weightSensorViewGroup.minY + 238.25))
        outerRingPath.addCurveToPoint(CGPointMake(weightSensorViewGroup.minX + 47.54, weightSensorViewGroup.minY + 278.5), controlPoint1: CGPointMake(weightSensorViewGroup.minX + 60.89, weightSensorViewGroup.minY + 265.2), controlPoint2: CGPointMake(weightSensorViewGroup.minX + 55.13, weightSensorViewGroup.minY + 270.94))
        outerRingPath.addCurveToPoint(CGPointMake(weightSensorViewGroup.minX, weightSensorViewGroup.minY + 174.77), controlPoint1: CGPointMake(weightSensorViewGroup.minX + 20.48, weightSensorViewGroup.minY + 251.54), controlPoint2: CGPointMake(weightSensorViewGroup.minX + 2.86, weightSensorViewGroup.minY + 215.18))
        outerRingPath.addCurveToPoint(CGPointMake(weightSensorViewGroup.minX, weightSensorViewGroup.minY + 151.52), controlPoint1: CGPointMake(weightSensorViewGroup.minX, weightSensorViewGroup.minY + 167.03), controlPoint2: CGPointMake(weightSensorViewGroup.minX, weightSensorViewGroup.minY + 159.26))
        outerRingPath.addCurveToPoint(CGPointMake(weightSensorViewGroup.minX + 65.23, weightSensorViewGroup.minY + 32.5), controlPoint1: CGPointMake(weightSensorViewGroup.minX + 3.44, weightSensorViewGroup.minY + 102.85), controlPoint2: CGPointMake(weightSensorViewGroup.minX + 28.29, weightSensorViewGroup.minY + 60.08))
        outerRingPath.addCurveToPoint(CGPointMake(weightSensorViewGroup.minX + 100.04, weightSensorViewGroup.minY + 12.62), controlPoint1: CGPointMake(weightSensorViewGroup.minX + 75.9, weightSensorViewGroup.minY + 24.53), controlPoint2: CGPointMake(weightSensorViewGroup.minX + 87.58, weightSensorViewGroup.minY + 17.83))
        outerRingPath.addCurveToPoint(CGPointMake(weightSensorViewGroup.minX + 163.3, weightSensorViewGroup.minY), controlPoint1: CGPointMake(weightSensorViewGroup.minX + 119.5, weightSensorViewGroup.minY + 4.49), controlPoint2: CGPointMake(weightSensorViewGroup.minX + 140.87, weightSensorViewGroup.minY))
        outerRingPath.addCurveToPoint(CGPointMake(weightSensorViewGroup.minX + 327, weightSensorViewGroup.minY + 163.14), controlPoint1: CGPointMake(weightSensorViewGroup.minX + 253.71, weightSensorViewGroup.minY), controlPoint2: CGPointMake(weightSensorViewGroup.minX + 327, weightSensorViewGroup.minY + 73.04))
        outerRingPath.closePath()
        CGContextSaveGState(context)
        outerRingPath.addClip()
        let outerRingBounds = CGPathGetPathBoundingBox(outerRingPath.CGPath)
        CGContextDrawLinearGradient(context, StyleKit.gradient,
            CGPointMake(outerRingBounds.minX, outerRingBounds.midY),
            CGPointMake(outerRingBounds.maxX, outerRingBounds.midY),
            0)
        CGContextRestoreGState(context)
        StyleKit.ringFillColor.setStroke()
        outerRingPath.lineWidth = 1
        outerRingPath.stroke()


        //// pointer Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, weightSensorViewGroup.minX + 163.4, weightSensorViewGroup.minY + 163.41)
        CGContextRotateCTM(context, -(pointerAngle + 135) * CGFloat(M_PI) / 180)

        var pointerPath = UIBezierPath()
        pointerPath.moveToPoint(CGPointMake(-10.07, 43.05))
        pointerPath.addLineToPoint(CGPointMake(9.41, 43.05))
        pointerPath.addLineToPoint(CGPointMake(9.41, -90.86))
        pointerPath.addLineToPoint(CGPointMake(-0.33, -106.38))
        pointerPath.addLineToPoint(CGPointMake(-10.07, -90.86))
        pointerPath.addLineToPoint(CGPointMake(-10.07, 43.05))
        pointerPath.closePath()
        pointerPath.lineJoinStyle = kCGLineJoinRound;

        pointerFillColor.setFill()
        pointerPath.fill()

        CGContextRestoreGState(context)


        //// centerCircle Drawing
        var centerCirclePath = UIBezierPath(ovalInRect: CGRectMake(weightSensorViewGroup.minX + 142.5, weightSensorViewGroup.minY + 142, 41, 41))
        UIColor.whiteColor().setFill()
        centerCirclePath.fill()
        UIColor.lightGrayColor().setStroke()
        centerCirclePath.lineWidth = 6
        centerCirclePath.stroke()


        //// Text1 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, weightSensorViewGroup.minX + 191.59, weightSensorViewGroup.minY + 162.6)
        CGContextRotateCTM(context, -90 * CGFloat(M_PI) / 180)

        let text1Rect = CGRectMake(-7.13, -171.57, 27.68, 17.16)
        var text1TextContent = NSString(string: "15")
        let text1Style = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        text1Style.alignment = NSTextAlignment.Left

        let text1FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: text1Style]

        let text1TextHeight: CGFloat = text1TextContent.boundingRectWithSize(CGSizeMake(text1Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text1FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text1Rect);
        text1TextContent.drawInRect(CGRectMake(text1Rect.minX, text1Rect.minY + (text1Rect.height - text1TextHeight) / 2, text1Rect.width, text1TextHeight), withAttributes: text1FontAttributes)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// Text 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, weightSensorViewGroup.minX + 187.46, weightSensorViewGroup.minY + 179.46)
        CGContextRotateCTM(context, -45 * CGFloat(M_PI) / 180)

        let text2Rect = CGRectMake(-12.89, -171.87, 34.14, 17.13)
        var text2TextContent = NSString(string: "30")
        let text2Style = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        text2Style.alignment = NSTextAlignment.Left

        let text2FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRectWithSize(CGSizeMake(text2Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text2Rect);
        text2TextContent.drawInRect(CGRectMake(text2Rect.minX, text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, text2Rect.width, text2TextHeight), withAttributes: text2FontAttributes)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// Text 3 Drawing
        let text3Rect = CGRectMake(weightSensorViewGroup.minX + 155.5, weightSensorViewGroup.minY + 19, 46, 18)
        var text3TextContent = NSString(string: "45")
        let text3Style = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        text3Style.alignment = NSTextAlignment.Left

        let text3FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: text3Style]

        let text3TextHeight: CGFloat = text3TextContent.boundingRectWithSize(CGSizeMake(text3Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text3Rect);
        text3TextContent.drawInRect(CGRectMake(text3Rect.minX, text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, text3Rect.width, text3TextHeight), withAttributes: text3FontAttributes)
        CGContextRestoreGState(context)


        //// Text 4 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, weightSensorViewGroup.minX + 147.71, weightSensorViewGroup.minY + 188.06)
        CGContextRotateCTM(context, -315 * CGFloat(M_PI) / 180)

        let text4Rect = CGRectMake(-14.64, -172.54, 29.92, 17.17)
        var text4TextContent = NSString(string: "60")
        let text4Style = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        text4Style.alignment = NSTextAlignment.Left

        let text4FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: text4Style]

        let text4TextHeight: CGFloat = text4TextContent.boundingRectWithSize(CGSizeMake(text4Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text4Rect);
        text4TextContent.drawInRect(CGRectMake(text4Rect.minX, text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, text4Rect.width, text4TextHeight), withAttributes: text4FontAttributes)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// Text 5 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, weightSensorViewGroup.minX + 135.49, weightSensorViewGroup.minY + 168.72)
        CGContextRotateCTM(context, 90 * CGFloat(M_PI) / 180)

        let text5Rect = CGRectMake(-13.68, -169.76, 27.95, 17.16)
        var text5TextContent = NSString(string: "75")
        let text5Style = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        text5Style.alignment = NSTextAlignment.Left

        let text5FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: text5Style]

        let text5TextHeight: CGFloat = text5TextContent.boundingRectWithSize(CGSizeMake(text5Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text5Rect);
        text5TextContent.drawInRect(CGRectMake(text5Rect.minX, text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, text5Rect.width, text5TextHeight), withAttributes: text5FontAttributes)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// Text 6 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, weightSensorViewGroup.minX + 183.13, weightSensorViewGroup.minY + 143.58)
        CGContextRotateCTM(context, -135 * CGFloat(M_PI) / 180)

        let text6Rect = CGRectMake(0.17, -169.9, 34.37, 17.17)
        var text6TextContent = NSString(string: "0")
        let text6Style = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        text6Style.alignment = NSTextAlignment.Left

        let text6FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: text6Style]

        let text6TextHeight: CGFloat = text6TextContent.boundingRectWithSize(CGSizeMake(text6Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text6FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text6Rect);
        text6TextContent.drawInRect(CGRectMake(text6Rect.minX, text6Rect.minY + (text6Rect.height - text6TextHeight) / 2, text6Rect.width, text6TextHeight), withAttributes: text6FontAttributes)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// Text 7 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, weightSensorViewGroup.minX + 129.18, weightSensorViewGroup.minY + 157.95)
        CGContextRotateCTM(context, 135 * CGFloat(M_PI) / 180)

        let text7Rect = CGRectMake(-36, -170.2, 37.7, 17.13)
        var text7TextContent = NSString(string: "90")
        let text7Style = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        text7Style.alignment = NSTextAlignment.Left

        let text7FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: text7Style]

        let text7TextHeight: CGFloat = text7TextContent.boundingRectWithSize(CGSizeMake(text7Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text7FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text7Rect);
        text7TextContent.drawInRect(CGRectMake(text7Rect.minX, text7Rect.minY + (text7Rect.height - text7TextHeight) / 2, text7Rect.width, text7TextHeight), withAttributes: text7FontAttributes)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// limitIndicator Drawing
        var limitIndicatorPath = UIBezierPath(ovalInRect: CGRectMake(weightSensorViewGroup.minX + 268, weightSensorViewGroup.minY + 49.5, 10, 10))
        UIColor.whiteColor().setFill()
        limitIndicatorPath.fill()
        StyleKit.ringFillColor.setStroke()
        limitIndicatorPath.lineWidth = 1
        limitIndicatorPath.stroke()
    }

    //// Generated Images

    public class func imageOfWeightSensor(#frame: CGRect, weightScale: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawWeightSensor(frame: frame, weightScale: weightScale)

        let imageOfWeightSensor = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfWeightSensor
    }

}



extension UIColor {
    func blendedColorWithFraction(fraction: CGFloat, ofColor color: UIColor) -> UIColor {
        var r1: CGFloat = 1.0, g1: CGFloat = 1.0, b1: CGFloat = 1.0, a1: CGFloat = 1.0
        var r2: CGFloat = 1.0, g2: CGFloat = 1.0, b2: CGFloat = 1.0, a2: CGFloat = 1.0

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
